{
  "env": {
    "es6": true,
    "node": true,
    "browser": true
  },
  "extends": [
    "eslint-config-ryanair",
    "prettier",
    "prettier/@typescript-eslint",
    "plugin:ordered-imports/recommended"
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
      "project": "./tsconfig.eslint.json",
      "debugLevel": "true",
      "sourceType": "module"
  },
  "plugins": [
      "eslint-plugin-jsdoc",
      "eslint-plugin-prefer-arrow",
      "eslint-plugin-import",
      "eslint-plugin-rxjs",
      "ordered-imports",
      "@angular-eslint/eslint-plugin",
      "@typescript-eslint",
      "@typescript-eslint/tslint"
  ],
  "rules": {
    "@angular-eslint/component-class-suffix": "error",
    "@angular-eslint/directive-class-suffix": "error",
    "@angular-eslint/no-forward-ref": "error",
    "@angular-eslint/no-input-rename": "error",
    "@angular-eslint/no-output-rename": "error",
    "@angular-eslint/use-pipe-transform-interface": "error",
    "@typescript-eslint/adjacent-overload-signatures": "error",
    "@typescript-eslint/array-type": [
        "warn",
        {
            "default": "array"
        }
    ],
    "@typescript-eslint/ban-types": [
        "warn",
        {
            "types": {
                "Object": {
                    "message": "Avoid using the `Object` type. Did you mean `object`?"
                },
                "Boolean": {
                    "message": "Avoid using the `Boolean` type. Did you mean `boolean`?"
                },
                "Number": {
                    "message": "Avoid using the `Number` type. Did you mean `number`?"
                },
                "String": {
                    "message": "Avoid using the `String` type. Did you mean `string`?"
                },
                "Symbol": {
                    "message": "Avoid using the `Symbol` type. Did you mean `symbol`?"
                },
            }
        }
    ],
    "@typescript-eslint/consistent-type-assertions": "error",
    "@typescript-eslint/dot-notation": "off",
    "@typescript-eslint/member-delimiter-style": [
        "off",
        {
            "multiline": {
                "delimiter": "none",
                "requireLast": true
            },
            "singleline": {
                "delimiter": "semi",
                "requireLast": false
            }
        }
    ],
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": "enum",
        "format": ["UPPER_CASE", "StrictPascalCase", "camelCase"]
      },
      {
        "selector": "enumMember",
        "format": ["UPPER_CASE", "StrictPascalCase", "camelCase"]
      }
    ],
    "@typescript-eslint/no-empty-function": "error",
    "@typescript-eslint/no-empty-interface": "error",
    "@typescript-eslint/no-explicit-any": "off",
    "@typescript-eslint/no-misused-new": "error",
    "@typescript-eslint/no-namespace": "error",
    "@typescript-eslint/no-parameter-properties": "off",
    "@typescript-eslint/no-shadow": [
        "error",
        {
            "hoist": "all"
        }
    ],
    "@typescript-eslint/no-unused-expressions": [
      "error",
      {
        "allowTernary": true,
      }
    ],
    "@typescript-eslint/no-use-before-define": "warn",
    "@typescript-eslint/no-var-requires": "error",
    "@typescript-eslint/prefer-for-of": "error",
    "@typescript-eslint/prefer-function-type": "error",
    "@typescript-eslint/prefer-namespace-keyword": "error",
    "@typescript-eslint/quotes": [
        "error",
        "single",
        {
            "allowTemplateLiterals": true,
            "avoidEscape": true
        }
    ],
    "@typescript-eslint/semi": [
        "off",
        null
    ],
    "@typescript-eslint/triple-slash-reference": [
        "error",
        {
            "path": "always",
            "types": "prefer-import",
            "lib": "always"
        }
    ],
    "@typescript-eslint/unified-signatures": "error",
    "arrow-parens": [
        "off",
        "always"
    ],
    "brace-style": [
        "off",
        "off"
    ],
    "comma-dangle": [
        "off",
        "always-multiline"
    ],
    "complexity": "off",
    "constructor-super": "error",
    "eqeqeq": [
        "error",
        "smart"
    ],
    "function-paren-newline": "off",
    "guard-for-in": "error",
    "id-blacklist": [
        "error",
        "any",
        "Number",
        "String",
        "string",
        "Boolean",
        "boolean",
        "Undefined",
        "undefined"
    ],
    "id-match": "error",
    "import/no-deprecated": "warn",
    "indent": [
      "error",
      2,
      {
        "SwitchCase": 1,
        "VariableDeclarator": 1,
        "outerIIFEBody": 1,
        "FunctionDeclaration": {
          "parameters": 1,
          "body": 1
        },
        "FunctionExpression": {
          "parameters": 1,
          "body": 1
        },
        "CallExpression": {
          "arguments": 1
        },
        "ArrayExpression": 1,
        "ObjectExpression": 1,
        "ImportDeclaration": 1,
        "flatTernaryExpressions": false,
        "ignoredNodes": [
          "ConditionalExpression"
        ],
        "ignoreComments": false
      }
    ],
    "object-curly-newline": "off",
    "ordered-imports/ordered-imports": [
      "error",
      {
        "symbols-first": true,
        "specifier-ordering": "any",
        "group-ordering": [
          {
            "name": "Core, Ryanair and third-party imports",
            "match": "^(@angular|@ryanair|ramda|rxjs|@?ng-?[a-zA-Z]+|date-fns|@herodev|(?:\\w+-?)*$)",
            "order": 10
          },
          {
            "name": "Local imports",
            "match": "^(\\.|\\.\\.)",
            "order": 20
          }
        ]
      }
    ],
    "jsdoc/check-alignment": "error",
    "jsdoc/check-indentation": "error",
    "jsdoc/newline-after-description": [
      "error",
      "never"
    ],
    "max-classes-per-file": "off",
    "max-len": [
        "error",
        {
            "code": 100
        }
    ],
    "no-bitwise": "error",
    "no-caller": "error",
    "no-cond-assign": "error",
    "no-console": [
        "error",
        {
            "allow": [
                "log",
                "warn",
                "dir",
                "timeLog",
                "assert",
                "clear",
                "count",
                "countReset",
                "group",
                "groupEnd",
                "table",
                "debug",
                "info",
                "dirxml",
                "error",
                "groupCollapsed",
                "Console",
                "profile",
                "profileEnd",
                "timeStamp",
                "context"
            ]
        }
    ],
    "no-debugger": "error",
    "no-empty": "error",
    "no-eval": "error",
    "no-fallthrough": "off",
    "no-invalid-this": "off",
    "no-irregular-whitespace": "off",
    "no-new-wrappers": "error",
    "no-restricted-imports": [
        "error",
        "ramda"
    ],
    "no-throw-literal": "error",
    "no-trailing-spaces": "error",
    "no-undef-init": "error",
    "no-underscore-dangle": [
      "error",
      {
        "allow": ["_val"],
        "allowAfterThis": true,
        "allowAfterSuper": true,
        "enforceInMethodNames": false
      }
    ],
    "no-unsafe-finally": "error",
    "no-unused-labels": "error",
    "no-unused-vars": [
      "error",
      {
        "args": "after-used",
        "argsIgnorePattern": "^_",
        "varsIgnorePattern": "^_"
      }
    ],
    "no-var": "error",
    "object-shorthand": "error",
    "one-var": [
        "error",
        "never"
    ],
    "prefer-arrow/prefer-arrow-functions": [
      "warn"
    ],
    "prefer-const": "error",
    "radix": "error",
    "rxjs/no-unsafe-takeuntil": "error",
    "space-in-parens": [
        "off",
        "never"
    ],
    "spaced-comment": [
        "error",
        "always",
        {
            "markers": [
                "/"
            ]
        }
    ],
    "use-isnan": "error",
    "valid-typeof": "off",
    "wrap-iife": ["error", "any", { "functionPrototypeMethods": false }]
  }
}
